{"ast":null,"code":"import _slicedToArray from \"C:\\\\Temp\\\\Rocketseat\\\\Bootcamp\\\\gobarber\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Temp\\\\Rocketseat\\\\Bootcamp\\\\gobarber\\\\frontend\\\\src\\\\pages\\\\Dashboard\\\\index.js\";\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { format, subDays, addDays, setHours, setMinutes, setSeconds, isBefore, isEqual, parseISO } from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport pt from 'date-fns/locale/pt';\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md';\nimport api from \"../../services/api\";\nimport { Container, Time } from './styles';\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nexport default function Dashboard() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        schedule = _useState2[0],\n        setSchedule = _useState2[1];\n\n  const _useState3 = useState(new Date()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        date = _useState4[0],\n        setDate = _useState4[1];\n\n  const dateFormatted = useMemo(() => format(date, \"d 'de' MMMM\", {\n    locale: pt\n  }), [date]);\n  useEffect(() => {\n    async function loadSchedule() {\n      const response = await api.get('schedule', {\n        params: {\n          date\n        }\n      });\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      const data = range.map(hour => {\n        const checkDate = setSeconds(setMinutes(setHours(date, hour), 0), 0);\n        const compareDate = utcToZonedTime(checkDate, timezone);\n        return {\n          time: \"\".concat(hour, \":00h\"),\n          past: isBefore(compareDate, new Date()),\n          appointment: response.data.find(a => isEqual(parseISO(a.date), compareDate))\n        };\n      });\n      setSchedule(data);\n    }\n  }, [date]);\n\n  function handlePrevDay() {\n    setDate(subDays(date, 1));\n  }\n\n  function handleNextDay() {\n    setDate(addDays(date, 1));\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handlePrevDay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(MdChevronLeft, {\n    size: 36,\n    color: \"#FFF\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  })), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, dateFormatted), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handleNextDay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(MdChevronRight, {\n    size: 36,\n    color: \"#FFF\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }))), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, schedule.map(time => React.createElement(Time, {\n    key: time.time,\n    past: time.past,\n    available: !time.appointment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, time.time), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, time.appointment ? time.appointment.user.name : 'Em aberto')))));\n}","map":{"version":3,"sources":["C:\\Temp\\Rocketseat\\Bootcamp\\gobarber\\frontend\\src\\pages\\Dashboard\\index.js"],"names":["React","useState","useMemo","useEffect","format","subDays","addDays","setHours","setMinutes","setSeconds","isBefore","isEqual","parseISO","utcToZonedTime","pt","MdChevronLeft","MdChevronRight","api","Container","Time","range","Dashboard","schedule","setSchedule","Date","date","setDate","dateFormatted","locale","loadSchedule","response","get","params","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","data","map","hour","checkDate","compareDate","time","past","appointment","find","a","handlePrevDay","handleNextDay","user","name"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\nimport {\n    format,\n    subDays,\n    addDays,\n    setHours,\n    setMinutes,\n    setSeconds,\n    isBefore,\n    isEqual,\n    parseISO,\n} from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport pt from 'date-fns/locale/pt';\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md';\nimport api from '~/services/api';\n\nimport { Container, Time } from './styles';\n\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\nexport default function Dashboard() {\n    const [schedule, setSchedule] = useState([]);\n    const [date, setDate] = useState(new Date());\n\n    const dateFormatted = useMemo(\n        () => format(date, \"d 'de' MMMM\", { locale: pt }),\n        [date]\n    );\n\n    useEffect(() => {\n        async function loadSchedule() {\n            const response = await api.get('schedule', {\n                params: { date },\n            });\n\n            const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n            const data = range.map(hour => {\n                const checkDate = setSeconds(\n                    setMinutes(setHours(date, hour), 0),\n                    0\n                );\n                const compareDate = utcToZonedTime(checkDate, timezone);\n\n                return {\n                    time: `${hour}:00h`,\n                    past: isBefore(compareDate, new Date()),\n                    appointment: response.data.find(a =>\n                        isEqual(parseISO(a.date), compareDate)\n                    ),\n                };\n            });\n\n            setSchedule(data);\n        }\n    }, [date]);\n\n    function handlePrevDay() {\n        setDate(subDays(date, 1));\n    }\n\n    function handleNextDay() {\n        setDate(addDays(date, 1));\n    }\n\n    return (\n        <Container>\n            <header>\n                <button type=\"button\" onClick={handlePrevDay}>\n                    <MdChevronLeft size={36} color=\"#FFF\" />\n                </button>\n                <strong>{dateFormatted}</strong>\n                <button type=\"button\" onClick={handleNextDay}>\n                    <MdChevronRight size={36} color=\"#FFF\" />\n                </button>\n            </header>\n            <ul>\n                {schedule.map(time => (\n                    <Time\n                        key={time.time}\n                        past={time.past}\n                        available={!time.appointment}\n                    >\n                        <strong>{time.time}</strong>\n                        <span>\n                            {time.appointment\n                                ? time.appointment.user.name\n                                : 'Em aberto'}\n                        </span>\n                    </Time>\n                ))}\n            </ul>\n        </Container>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}