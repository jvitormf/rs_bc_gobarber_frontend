{"ast":null,"code":"import _defineProperty from \"C:\\\\Temp\\\\Rocketseat\\\\Bootcamp\\\\gobarber\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Temp\\\\Rocketseat\\\\Bootcamp\\\\gobarber\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Temp\\\\Rocketseat\\\\Bootcamp\\\\gobarber\\\\frontend\\\\src\\\\components\\\\Notifications\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { MdNotifications } from 'react-icons/md';\nimport { parseISO, formatDistance } from 'date-fns';\nimport pt from 'date-fns/locale/pt';\nimport api from \"../../services/api\";\nimport { Container, Badge, NotificationList, Scroll, Notification } from './styles';\nexport default function Notifications() {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        visible = _useState2[0],\n        setVisible = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        notifications = _useState4[0],\n        setNotifications = _useState4[1];\n\n  const hasUnread = useMemo(() => !!notifications.find(notification => notification.read === false), [notifications]);\n  useEffect(() => {\n    async function loadNotifications() {\n      const response = await api.get('notifications');\n      const data = response.data.map(notification => _objectSpread({}, notification, {\n        timeDistance: formatDistance(parseISO(notification.createdAt), new Date(), {\n          addSuffix: true,\n          locale: pt\n        })\n      }));\n      setNotifications(data);\n    }\n\n    loadNotifications();\n  }, []);\n\n  function handleToggleVisible() {\n    setVisible(!visible);\n  }\n\n  async function handleMarkAsRead(id) {\n    await api.put(\"notifications/\".concat(id));\n    setNotifications(notifications.map(notification => notification._id === id ? _objectSpread({}, notification, {\n      read: true\n    }) : notification));\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Badge, {\n    onClick: handleToggleVisible,\n    hasUnread: hasUnread,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(MdNotifications, {\n    color: \"#7159c1\",\n    size: 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), React.createElement(NotificationList, {\n    visible: visible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Scroll, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, notifications.map(notification => React.createElement(Notification, {\n    key: notification._id,\n    unread: !notification.read,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, notification.content), React.createElement(\"time\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, notification.timeDistance), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => handleMarkAsRead(notification._id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Marcar como lida\"))))));\n}","map":{"version":3,"sources":["C:\\Temp\\Rocketseat\\Bootcamp\\gobarber\\frontend\\src\\components\\Notifications\\index.js"],"names":["React","useState","useEffect","useMemo","MdNotifications","parseISO","formatDistance","pt","api","Container","Badge","NotificationList","Scroll","Notification","Notifications","visible","setVisible","notifications","setNotifications","hasUnread","find","notification","read","loadNotifications","response","get","data","map","timeDistance","createdAt","Date","addSuffix","locale","handleToggleVisible","handleMarkAsRead","id","put","_id","content"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { MdNotifications } from 'react-icons/md';\nimport { parseISO, formatDistance } from 'date-fns';\nimport pt from 'date-fns/locale/pt';\n\nimport api from '~/services/api';\n\nimport {\n    Container,\n    Badge,\n    NotificationList,\n    Scroll,\n    Notification,\n} from './styles';\n\nexport default function Notifications() {\n    const [visible, setVisible] = useState(false);\n    const [notifications, setNotifications] = useState([]);\n\n    const hasUnread = useMemo(\n        () => !!notifications.find(notification => notification.read === false),\n        [notifications]\n    );\n\n    useEffect(() => {\n        async function loadNotifications() {\n            const response = await api.get('notifications');\n\n            const data = response.data.map(notification => ({\n                ...notification,\n                timeDistance: formatDistance(\n                    parseISO(notification.createdAt),\n                    new Date(),\n                    { addSuffix: true, locale: pt }\n                ),\n            }));\n\n            setNotifications(data);\n        }\n\n        loadNotifications();\n    }, []);\n\n    function handleToggleVisible() {\n        setVisible(!visible);\n    }\n\n    async function handleMarkAsRead(id) {\n        await api.put(`notifications/${id}`);\n\n        setNotifications(\n            notifications.map(notification =>\n                notification._id === id\n                    ? { ...notification, read: true }\n                    : notification\n            )\n        );\n    }\n\n    return (\n        <Container>\n            <Badge onClick={handleToggleVisible} hasUnread={hasUnread}>\n                <MdNotifications color=\"#7159c1\" size={20} />\n            </Badge>\n\n            <NotificationList visible={visible}>\n                <Scroll>\n                    {notifications.map(notification => (\n                        <Notification\n                            key={notification._id}\n                            unread={!notification.read}\n                        >\n                            <p>{notification.content}</p>\n                            <time>{notification.timeDistance}</time>\n                            <button\n                                type=\"button\"\n                                onClick={() =>\n                                    handleMarkAsRead(notification._id)\n                                }\n                            >\n                                Marcar como lida\n                            </button>\n                        </Notification>\n                    ))}\n                </Scroll>\n            </NotificationList>\n        </Container>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}